/* Problem: "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?"
 */
/* Goal: Create an incrementing loop that creates a new triangle number for each increment and checks how many divisors it has. Do this by having another incrementing loop that checks
 what it is divisible by and pushes the divisors to an array. For each rotation of the loop, check the array's length.  If it is equal to 500, break and print out the number.
 */


var finalAnswer = 0;
var onOff = 0;
var numDivisors = 0;
var currentTriangle = 0;
var i = 1;

function triangleFactors(){
    while (onOff === 0){
        currentTriangle += i;
        var sqrt = Math.sqrt(currentTriangle);
        var roundedSqrt = Math.ceil(sqrt);
        for (var j = 1; j <= roundedSqrt; j++){
            if (currentTriangle % j === 0){
                numDivisors = numDivisors + 2;
            }
            if (roundedSqrt * roundedSqrt == currentTriangle){
                numDivisors--;
            }
            if (numDivisors > 500){
                console.log(currentTriangle + " is divisible by " + numDivisors + " numbers!");
                finalAnswer = currentTriangle;
                console.log("The final answer is " + finalAnswer);
                return;
            }
        }
        console.log(currentTriangle + " is divisible by " + numDivisors + " numbers!");
        numDivisors = 0;
        i++;
    }
}

triangleFactors();

// I learned how to factor using square roots in this one.  It's SO MUCH more efficient than trying every possible divisor.